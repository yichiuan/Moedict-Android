// automatically generated by the FlatBuffers compiler, do not modify

package moe.taiwan;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Heteronym extends Table {
  public static Heteronym getRootAsHeteronym(ByteBuffer _bb) { return getRootAsHeteronym(_bb, new Heteronym()); }
  public static Heteronym getRootAsHeteronym(ByteBuffer _bb, Heteronym obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Heteronym __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public String audioId() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer audioIdAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public String reading() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer readingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public String trs() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer trsAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public int synonyms(int j) { int o = __offset(12); return o != 0 ? bb.getShort(__vector(o) + j * 2) & 0xFFFF : 0; }
  public int synonymsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer synonymsAsByteBuffer() { return __vector_as_bytebuffer(12, 2); }
  public int antonyms(int j) { int o = __offset(14); return o != 0 ? bb.getShort(__vector(o) + j * 2) & 0xFFFF : 0; }
  public int antonymsLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer antonymsAsByteBuffer() { return __vector_as_bytebuffer(14, 2); }
  public Definition definitions(int j) { return definitions(new Definition(), j); }
  public Definition definitions(Definition obj, int j) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int definitionsLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }

  public static int createHeteronym(FlatBufferBuilder builder,
      int idOffset,
      int audio_idOffset,
      int readingOffset,
      int trsOffset,
      int synonymsOffset,
      int antonymsOffset,
      int definitionsOffset) {
    builder.startObject(7);
    Heteronym.addDefinitions(builder, definitionsOffset);
    Heteronym.addAntonyms(builder, antonymsOffset);
    Heteronym.addSynonyms(builder, synonymsOffset);
    Heteronym.addTrs(builder, trsOffset);
    Heteronym.addReading(builder, readingOffset);
    Heteronym.addAudioId(builder, audio_idOffset);
    Heteronym.addId(builder, idOffset);
    return Heteronym.endHeteronym(builder);
  }

  public static void startHeteronym(FlatBufferBuilder builder) { builder.startObject(7); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addAudioId(FlatBufferBuilder builder, int audioIdOffset) { builder.addOffset(1, audioIdOffset, 0); }
  public static void addReading(FlatBufferBuilder builder, int readingOffset) { builder.addOffset(2, readingOffset, 0); }
  public static void addTrs(FlatBufferBuilder builder, int trsOffset) { builder.addOffset(3, trsOffset, 0); }
  public static void addSynonyms(FlatBufferBuilder builder, int synonymsOffset) { builder.addOffset(4, synonymsOffset, 0); }
  public static int createSynonymsVector(FlatBufferBuilder builder, short[] data) { builder.startVector(2, data.length, 2); for (int i = data.length - 1; i >= 0; i--) builder.addShort(data[i]); return builder.endVector(); }
  public static void startSynonymsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(2, numElems, 2); }
  public static void addAntonyms(FlatBufferBuilder builder, int antonymsOffset) { builder.addOffset(5, antonymsOffset, 0); }
  public static int createAntonymsVector(FlatBufferBuilder builder, short[] data) { builder.startVector(2, data.length, 2); for (int i = data.length - 1; i >= 0; i--) builder.addShort(data[i]); return builder.endVector(); }
  public static void startAntonymsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(2, numElems, 2); }
  public static void addDefinitions(FlatBufferBuilder builder, int definitionsOffset) { builder.addOffset(6, definitionsOffset, 0); }
  public static int createDefinitionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDefinitionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endHeteronym(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

