// automatically generated by the FlatBuffers compiler, do not modify

package moe;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Words extends Table {
  public static Words getRootAsWords(ByteBuffer _bb) { return getRootAsWords(_bb, new Words()); }
  public static Words getRootAsWords(ByteBuffer _bb, Words obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Words __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int word(int j) { int o = __offset(4); return o != 0 ? bb.getShort(__vector(o) + j * 2) & 0xFFFF : 0; }
  public int wordLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer wordAsByteBuffer() { return __vector_as_bytebuffer(4, 2); }

  public static int createWords(FlatBufferBuilder builder,
      int wordOffset) {
    builder.startObject(1);
    Words.addWord(builder, wordOffset);
    return Words.endWords(builder);
  }

  public static void startWords(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addWord(FlatBufferBuilder builder, int wordOffset) { builder.addOffset(0, wordOffset, 0); }
  public static int createWordVector(FlatBufferBuilder builder, short[] data) { builder.startVector(2, data.length, 2); for (int i = data.length - 1; i >= 0; i--) builder.addShort(data[i]); return builder.endVector(); }
  public static void startWordVector(FlatBufferBuilder builder, int numElems) { builder.startVector(2, numElems, 2); }
  public static int endWords(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

